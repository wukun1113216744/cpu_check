<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="438" onload="init(evt)" viewBox="0 0 1200 438" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="438.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="421" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="421" > </text>
<g id="frames">
<g >
<title>ksys_write (947 samples, 97.83%)</title><rect x="28.3" y="165" width="1154.4" height="15.0" fill="rgb(223,129,4)" rx="2" ry="2" />
<text  x="31.29" y="175.5" >ksys_write</text>
</g>
<g >
<title>mutex_trylock (2 samples, 0.21%)</title><rect x="1175.4" y="85" width="2.4" height="15.0" fill="rgb(213,22,53)" rx="2" ry="2" />
<text  x="1178.37" y="95.5" ></text>
</g>
<g >
<title>a.out (968 samples, 100.00%)</title><rect x="10.0" y="373" width="1180.0" height="15.0" fill="rgb(232,69,27)" rx="2" ry="2" />
<text  x="13.00" y="383.5" >a.out</text>
</g>
<g >
<title>all (968 samples, 100%)</title><rect x="10.0" y="389" width="1180.0" height="15.0" fill="rgb(238,15,25)" rx="2" ry="2" />
<text  x="13.00" y="399.5" ></text>
</g>
<g >
<title>tty_flip_buffer_push (752 samples, 77.69%)</title><rect x="250.1" y="69" width="916.7" height="15.0" fill="rgb(217,45,12)" rx="2" ry="2" />
<text  x="253.14" y="79.5" >tty_flip_buffer_push</text>
</g>
<g >
<title>tty_flip_buffer_push (1 samples, 0.10%)</title><rect x="1170.5" y="85" width="1.2" height="15.0" fill="rgb(242,53,14)" rx="2" ry="2" />
<text  x="1173.50" y="95.5" ></text>
</g>
<g >
<title>remove_wait_queue (1 samples, 0.10%)</title><rect x="1171.7" y="101" width="1.2" height="15.0" fill="rgb(218,204,16)" rx="2" ry="2" />
<text  x="1174.71" y="111.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (953 samples, 98.45%)</title><rect x="21.0" y="213" width="1161.7" height="15.0" fill="rgb(235,135,49)" rx="2" ry="2" />
<text  x="23.97" y="223.5" >entry_SYSCALL_64_after_hwframe</text>
</g>
<g >
<title>fsnotify (2 samples, 0.21%)</title><rect x="1179.0" y="133" width="2.5" height="15.0" fill="rgb(253,22,51)" rx="2" ry="2" />
<text  x="1182.03" y="143.5" ></text>
</g>
<g >
<title>mutex_lock (3 samples, 0.31%)</title><rect x="239.2" y="85" width="3.6" height="15.0" fill="rgb(224,218,37)" rx="2" ry="2" />
<text  x="242.17" y="95.5" ></text>
</g>
<g >
<title>tty_write_lock (2 samples, 0.21%)</title><rect x="1175.4" y="101" width="2.4" height="15.0" fill="rgb(235,168,13)" rx="2" ry="2" />
<text  x="1178.37" y="111.5" ></text>
</g>
<g >
<title>down_read (3 samples, 0.31%)</title><rect x="235.5" y="85" width="3.7" height="15.0" fill="rgb(247,105,3)" rx="2" ry="2" />
<text  x="238.52" y="95.5" ></text>
</g>
<g >
<title>__fsnotify_parent (1 samples, 0.10%)</title><rect x="33.2" y="149" width="1.2" height="15.0" fill="rgb(246,21,10)" rx="2" ry="2" />
<text  x="36.16" y="159.5" ></text>
</g>
<g >
<title>pty_write (146 samples, 15.08%)</title><rect x="57.5" y="69" width="178.0" height="15.0" fill="rgb(246,125,7)" rx="2" ry="2" />
<text  x="60.54" y="79.5" >pty_write</text>
</g>
<g >
<title>vfs_write (942 samples, 97.31%)</title><rect x="34.4" y="149" width="1148.3" height="15.0" fill="rgb(246,118,5)" rx="2" ry="2" />
<text  x="37.38" y="159.5" >vfs_write</text>
</g>
<g >
<title>_raw_spin_lock_irqsave (1 samples, 0.10%)</title><rect x="55.1" y="69" width="1.2" height="15.0" fill="rgb(243,55,1)" rx="2" ry="2" />
<text  x="58.10" y="79.5" ></text>
</g>
<g >
<title>new_do_write (959 samples, 99.07%)</title><rect x="13.7" y="261" width="1169.0" height="15.0" fill="rgb(251,6,39)" rx="2" ry="2" />
<text  x="16.66" y="271.5" >new_do_write</text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 0.10%)</title><rect x="1183.9" y="277" width="1.2" height="15.0" fill="rgb(206,50,10)" rx="2" ry="2" />
<text  x="1186.90" y="287.5" ></text>
</g>
<g >
<title>do_syscall_64 (953 samples, 98.45%)</title><rect x="21.0" y="197" width="1161.7" height="15.0" fill="rgb(231,157,3)" rx="2" ry="2" />
<text  x="23.97" y="207.5" >do_syscall_64</text>
</g>
<g >
<title>_IO_new_file_xsputn (2 samples, 0.21%)</title><rect x="1182.7" y="293" width="2.4" height="15.0" fill="rgb(206,182,22)" rx="2" ry="2" />
<text  x="1185.69" y="303.5" ></text>
</g>
<g >
<title>__strlen_avx2 (3 samples, 0.31%)</title><rect x="1185.1" y="293" width="3.7" height="15.0" fill="rgb(225,110,45)" rx="2" ry="2" />
<text  x="1188.12" y="303.5" ></text>
</g>
<g >
<title>_IO_new_do_write (959 samples, 99.07%)</title><rect x="13.7" y="277" width="1169.0" height="15.0" fill="rgb(206,8,27)" rx="2" ry="2" />
<text  x="16.66" y="287.5" >_IO_new_do_write</text>
</g>
<g >
<title>n_tty_write (920 samples, 95.04%)</title><rect x="50.2" y="101" width="1121.5" height="15.0" fill="rgb(224,21,0)" rx="2" ry="2" />
<text  x="53.23" y="111.5" >n_tty_write</text>
</g>
<g >
<title>pty_write (756 samples, 78.10%)</title><rect x="245.3" y="85" width="921.5" height="15.0" fill="rgb(218,39,16)" rx="2" ry="2" />
<text  x="248.27" y="95.5" >pty_write</text>
</g>
<g >
<title>_IO_new_file_overflow (960 samples, 99.17%)</title><rect x="12.4" y="293" width="1170.3" height="15.0" fill="rgb(210,85,48)" rx="2" ry="2" />
<text  x="15.44" y="303.5" >_IO_new_file_overflow</text>
</g>
<g >
<title>__vfs_write (937 samples, 96.80%)</title><rect x="36.8" y="133" width="1142.2" height="15.0" fill="rgb(235,157,51)" rx="2" ry="2" />
<text  x="39.82" y="143.5" >__vfs_write</text>
</g>
<g >
<title>rw_verify_area (1 samples, 0.10%)</title><rect x="1181.5" y="133" width="1.2" height="15.0" fill="rgb(252,192,51)" rx="2" ry="2" />
<text  x="1184.47" y="143.5" ></text>
</g>
<g >
<title>_copy_from_user (1 samples, 0.10%)</title><rect x="44.1" y="101" width="1.3" height="15.0" fill="rgb(252,116,7)" rx="2" ry="2" />
<text  x="47.13" y="111.5" ></text>
</g>
<g >
<title>__lock_text_start (5 samples, 0.52%)</title><rect x="58.8" y="53" width="6.1" height="15.0" fill="rgb(205,12,2)" rx="2" ry="2" />
<text  x="61.76" y="63.5" ></text>
</g>
<g >
<title>__check_heap_object (1 samples, 0.10%)</title><rect x="40.5" y="101" width="1.2" height="15.0" fill="rgb(236,21,21)" rx="2" ry="2" />
<text  x="43.48" y="111.5" ></text>
</g>
<g >
<title>tty_write (937 samples, 96.80%)</title><rect x="36.8" y="117" width="1142.2" height="15.0" fill="rgb(220,78,8)" rx="2" ry="2" />
<text  x="39.82" y="127.5" >tty_write</text>
</g>
<g >
<title>add_wait_queue (1 samples, 0.10%)</title><rect x="55.1" y="85" width="1.2" height="15.0" fill="rgb(212,125,29)" rx="2" ry="2" />
<text  x="58.10" y="95.5" ></text>
</g>
<g >
<title>__fsnotify_parent (1 samples, 0.10%)</title><rect x="35.6" y="133" width="1.2" height="15.0" fill="rgb(206,166,20)" rx="2" ry="2" />
<text  x="38.60" y="143.5" ></text>
</g>
<g >
<title>__check_heap_object (1 samples, 0.10%)</title><rect x="42.9" y="85" width="1.2" height="15.0" fill="rgb(214,202,4)" rx="2" ry="2" />
<text  x="45.91" y="95.5" ></text>
</g>
<g >
<title>__fdget_pos (4 samples, 0.41%)</title><rect x="28.3" y="149" width="4.9" height="15.0" fill="rgb(223,87,18)" rx="2" ry="2" />
<text  x="31.29" y="159.5" ></text>
</g>
<g >
<title>queue_work_on (752 samples, 77.69%)</title><rect x="250.1" y="53" width="916.7" height="15.0" fill="rgb(226,200,41)" rx="2" ry="2" />
<text  x="253.14" y="63.5" >queue_work_on</text>
</g>
<g >
<title>queue_work_on (139 samples, 14.36%)</title><rect x="66.1" y="37" width="169.4" height="15.0" fill="rgb(235,198,54)" rx="2" ry="2" />
<text  x="69.07" y="47.5" >queue_work_on</text>
</g>
<g >
<title>queue_work_on (1 samples, 0.10%)</title><rect x="64.9" y="53" width="1.2" height="15.0" fill="rgb(228,185,3)" rx="2" ry="2" />
<text  x="67.86" y="63.5" ></text>
</g>
<g >
<title>do_output_char (147 samples, 15.19%)</title><rect x="56.3" y="85" width="179.2" height="15.0" fill="rgb(238,184,22)" rx="2" ry="2" />
<text  x="59.32" y="95.5" >do_output_char</text>
</g>
<g >
<title>_IO_puts (967 samples, 99.90%)</title><rect x="10.0" y="309" width="1178.8" height="15.0" fill="rgb(244,170,13)" rx="2" ry="2" />
<text  x="13.00" y="319.5" >_IO_puts</text>
</g>
<g >
<title>__libc_start_main (968 samples, 100.00%)</title><rect x="10.0" y="341" width="1180.0" height="15.0" fill="rgb(234,52,18)" rx="2" ry="2" />
<text  x="13.00" y="351.5" >__libc_start_main</text>
</g>
<g >
<title>puts@plt (1 samples, 0.10%)</title><rect x="1188.8" y="309" width="1.2" height="15.0" fill="rgb(231,112,42)" rx="2" ry="2" />
<text  x="1191.78" y="319.5" ></text>
</g>
<g >
<title>mutex_unlock (2 samples, 0.21%)</title><rect x="242.8" y="85" width="2.5" height="15.0" fill="rgb(218,208,46)" rx="2" ry="2" />
<text  x="245.83" y="95.5" ></text>
</g>
<g >
<title>up_read (1 samples, 0.10%)</title><rect x="1177.8" y="101" width="1.2" height="15.0" fill="rgb(219,61,15)" rx="2" ry="2" />
<text  x="1180.81" y="111.5" ></text>
</g>
<g >
<title>_IO_new_file_write (959 samples, 99.07%)</title><rect x="13.7" y="245" width="1169.0" height="15.0" fill="rgb(249,170,47)" rx="2" ry="2" />
<text  x="16.66" y="255.5" >_IO_new_file_write</text>
</g>
<g >
<title>tty_flip_buffer_push (139 samples, 14.36%)</title><rect x="66.1" y="53" width="169.4" height="15.0" fill="rgb(227,202,42)" rx="2" ry="2" />
<text  x="69.07" y="63.5" >tty_flip_buffer_push</text>
</g>
<g >
<title>main (968 samples, 100.00%)</title><rect x="10.0" y="325" width="1180.0" height="15.0" fill="rgb(230,64,1)" rx="2" ry="2" />
<text  x="13.00" y="335.5" >main</text>
</g>
<g >
<title>copy_user_generic_unrolled (4 samples, 0.41%)</title><rect x="45.4" y="101" width="4.8" height="15.0" fill="rgb(252,193,50)" rx="2" ry="2" />
<text  x="48.35" y="111.5" ></text>
</g>
<g >
<title>tty_ldisc_deref (2 samples, 0.21%)</title><rect x="1172.9" y="101" width="2.5" height="15.0" fill="rgb(249,218,0)" rx="2" ry="2" />
<text  x="1175.93" y="111.5" ></text>
</g>
<g >
<title>__lock_text_start (2 samples, 0.21%)</title><rect x="1166.8" y="69" width="2.5" height="15.0" fill="rgb(211,226,50)" rx="2" ry="2" />
<text  x="1169.84" y="79.5" ></text>
</g>
<g >
<title>remove_wait_queue (3 samples, 0.31%)</title><rect x="1166.8" y="85" width="3.7" height="15.0" fill="rgb(233,189,54)" rx="2" ry="2" />
<text  x="1169.84" y="95.5" ></text>
</g>
<g >
<title>__x86_indirect_thunk_rax (1 samples, 0.10%)</title><rect x="1181.5" y="117" width="1.2" height="15.0" fill="rgb(227,65,49)" rx="2" ry="2" />
<text  x="1184.47" y="127.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irqsave (1 samples, 0.10%)</title><rect x="1169.3" y="69" width="1.2" height="15.0" fill="rgb(228,168,31)" rx="2" ry="2" />
<text  x="1172.28" y="79.5" ></text>
</g>
<g >
<title>__GI___libc_write (959 samples, 99.07%)</title><rect x="13.7" y="229" width="1169.0" height="15.0" fill="rgb(246,203,30)" rx="2" ry="2" />
<text  x="16.66" y="239.5" >__GI___libc_write</text>
</g>
<g >
<title>_start (968 samples, 100.00%)</title><rect x="10.0" y="357" width="1180.0" height="15.0" fill="rgb(227,144,38)" rx="2" ry="2" />
<text  x="13.00" y="367.5" >_start</text>
</g>
<g >
<title>__lock_text_start (4 samples, 0.41%)</title><rect x="245.3" y="69" width="4.8" height="15.0" fill="rgb(216,159,25)" rx="2" ry="2" />
<text  x="248.27" y="79.5" ></text>
</g>
<g >
<title>_cond_resched (2 samples, 0.21%)</title><rect x="236.7" y="69" width="2.5" height="15.0" fill="rgb(209,74,23)" rx="2" ry="2" />
<text  x="239.74" y="79.5" ></text>
</g>
<g >
<title>__check_object_size (2 samples, 0.21%)</title><rect x="41.7" y="101" width="2.4" height="15.0" fill="rgb(225,74,0)" rx="2" ry="2" />
<text  x="44.69" y="111.5" ></text>
</g>
<g >
<title>__fget_light (4 samples, 0.41%)</title><rect x="28.3" y="133" width="4.9" height="15.0" fill="rgb(213,107,51)" rx="2" ry="2" />
<text  x="31.29" y="143.5" ></text>
</g>
<g >
<title>ldsem_up_read (2 samples, 0.21%)</title><rect x="1172.9" y="85" width="2.5" height="15.0" fill="rgb(210,27,39)" rx="2" ry="2" />
<text  x="1175.93" y="95.5" ></text>
</g>
<g >
<title>__x64_sys_write (947 samples, 97.83%)</title><rect x="28.3" y="181" width="1154.4" height="15.0" fill="rgb(243,40,21)" rx="2" ry="2" />
<text  x="31.29" y="191.5" >__x64_sys_write</text>
</g>
</g>
</svg>
